-- File auto generated by servant-purescript! --
module Gonimo.WebAPI where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (toNullable)
import Data.Tuple (Tuple)
import Global (encodeURIComponent)
import Gonimo.Server.DbEntities (Invitation, SendInvitation)
import Gonimo.Server.Types (Family, Key, Secret)
import Gonimo.Types (AuthToken, Coffee)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit)
import Prim (String)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (getResult)


newtype SPParams_ = SPParams_ { baseURL :: String
                              }

postInvitations :: forall eff m.
                (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                => AuthToken -> Key Family
                -> m (Tuple (Key Invitation) Invitation)
postInvitations authorization reqBody = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitations"
  let reqHeaders =
        [{ field : "Authorization"
         , value : (encodeURIComponent <<< gDefaultToURLPiece) authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
deleteInvitations :: forall eff m.
                  (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                  => AuthToken -> Secret -> m Invitation
deleteInvitations authorization reqBody = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqUrl = baseURL <> "invitations"
  let reqHeaders =
        [{ field : "Authorization"
         , value : (encodeURIComponent <<< gDefaultToURLPiece) authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
postInvitationOutbox :: forall eff m.
                     (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
                     => AuthToken -> SendInvitation -> m Unit
postInvitationOutbox authorization reqBody = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "invitationOutbox"
  let reqHeaders =
        [{ field : "Authorization"
         , value : (encodeURIComponent <<< gDefaultToURLPiece) authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
postFamilies :: forall eff m.
             (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
             => AuthToken -> String -> m (Key Family)
postFamilies authorization reqBody = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqUrl = baseURL <> "families"
  let reqHeaders =
        [{ field : "Authorization"
         , value : (encodeURIComponent <<< gDefaultToURLPiece) authorization
         }]
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                , content = toNullable <<< Just <<< printJson <<< encodeJson $ reqBody
                                }
  getResult decodeJson affResp
  
getCoffee :: forall eff m.
          (MonadReader (SPSettings_ SPParams_) m, MonadError AjaxError m, MonadAff ( ajax :: AJAX | eff) m)
          => m Coffee
getCoffee = do
  SPSettings_ spOpts_ <- ask
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqUrl = baseURL <> "coffee"
  let reqHeaders =
        []
  affResp <- liftAff $ affjax defaultRequest
                                { method = httpMethod
                                , url = reqUrl
                                , headers = defaultRequest.headers <> reqHeaders
                                }
  getResult decodeJson affResp
  
